package Tree;


import java.util.LinkedList;
import java.util.Queue;


public class LevelTraversal {


   int data;
    LevelTraversal rt,lt,root;
    
    public void insert(int value)
    {
        if(root==null)
        {
            root = new LevelTraversal();
            root.data = value;
            return;
        }
        Queue<LevelTraversal> q1 = new LinkedList<LevelTraversal>();
        q1.add(root);
        while(!q1.isEmpty())
        {
            LevelTraversal l = q1.remove();
            if(l.lt == null)
            {
                LevelTraversal l1 = new LevelTraversal();
                l1.data = value;
                l.lt = l1;
                return;
            }
            else {
                q1.add(l.lt);
            }
            
            if(l.rt == null)
            {
                LevelTraversal l1 = new LevelTraversal();
                l1.data = value;
                l.rt = l1;
                return;
            }
            else {
                q1.add(l.rt);
            }
        }
        
    }
    
    public void levelorder()
    {
        Queue<LevelTraversal> q1 = new LinkedList<LevelTraversal>();
        q1.add(root);
        while(!q1.isEmpty())
        {
            LevelTraversal l = q1.remove();
            System.out.println(l.data);
            if(l.lt != null) {
                q1.add(l.lt);
            }
            
            
            if(l.rt != null) {
                q1.add(l.rt);
            }
        }
        
    }
    void inorder(LevelTraversal root)
    {
        if(root == null)
            return ;
        inorder(root.lt);
        System.out.println(root.data);
        inorder(root.rt);
    }
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        LevelTraversal obj = new LevelTraversal();
         obj.insert(10);
         obj.insert( 20);
         obj.insert( 30);
         obj.insert( 40);
         obj.insert( 50);
         System.out.println("inorder traversal");
         obj.inorder(obj.root);
         System.out.println("---------------------------------");
         System.out.println("level order traversal");
         obj.levelorder();
        
        
    }


}
***********************Mirror program*********************
 package binarytree;

class Node {
  Node left;
  Node right;
  int data;
}

class BinaryTree {

  public boolean ifMirrorTree(Node node1, Node node2) {
    if (node1 	== null && node2 == null) {
      return true;
    }

    if (node1 == null || node2 == null) {
      return false;
    }

    return node1.data == node2.data 
        && ifMirrorTree(node1.left, node2.right) 
        && ifMirrorTree(node1.right, node2.left);
  }

  public Node createNewNode(int val) {
    Node newNode = new Node();
    newNode.data = val;
    newNode.left = null;
    newNode.right = null;
    return newNode;
  }
}

public class BinaryTreeApp {

  public static void main(String[] args) 
   {

    BinaryTree a = new BinaryTree();

    Node root1 = a.createNewNode(2);
    root1.left = a.createNewNode(7);
    root1.right = a.createNewNode(8);
    root1.left.left = a.createNewNode(5);

    Node root2 = a.createNewNode(2);
    root2.left = a.createNewNode(8);
    root2.right = a.createNewNode(7);
    root2.right.right = a.createNewNode(5);

    System.out.println(a.ifMirrorTree(root1, root2));
  }

}
**********************************************
